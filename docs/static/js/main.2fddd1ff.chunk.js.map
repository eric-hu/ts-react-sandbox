{"version":3,"sources":["logo.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","globalTodoList","isDone","description","TodoListItem","item","React","useState","checked","setChecked","type","onClick","App","todoList","setTodoList","value","setValue","className","src","logo","alt","href","target","rel","map","key","Math","random","concat","addToTodoList","onChange","event","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,kC,gLCWvCC,G,MAA6B,CAC/B,CAAEC,QAAQ,EAAOC,YAAa,SAC9B,CAAED,QAAQ,EAAMC,YAAa,YAW/B,SAASC,EAAT,GAAqD,IAA7BC,EAA4B,EAA5BA,KAA4B,EACpBC,IAAMC,SAASF,EAAKH,QADA,mBAC3CM,EAD2C,KAClCC,EADkC,KAOlD,OACE,6BACE,2BAAOC,KAAK,WAAWF,QAASA,EAASG,QAP1B,WACjBN,EAAKH,QAAUG,EAAKH,OACpBO,EAAWJ,EAAKH,WAMd,8BAAOG,EAAKF,cAmDHS,MA9Cf,WAAgB,IAAD,EACmBN,IAAMC,SAAqBN,GAD9C,mBACNY,EADM,KACIC,EADJ,OAEaR,IAAMC,SAAS,IAF5B,mBAENQ,EAFM,KAECC,EAFD,KAgBb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,6CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQCV,EAASW,KAAI,SAAAnB,GAAI,OAChB,kBAACD,EAAD,CAAcC,KAAMA,EAAMoB,IAAKpB,EAAKF,YAAcuB,KAAKC,cAEzD,4BAAQhB,QAzBE,YAhCI,SAACI,GACrBd,EAAiBA,EAAe2B,OAAO,CACrC,CAAE1B,QAAQ,EAAOC,YAAaY,GAAS,aA+BvCc,CAAcd,GACdC,EAAS,IAETF,EAAYb,KAqBR,YACA,2BACES,KAAK,OACLoB,SAAU,SAAAC,GAAK,OAAIf,EAASe,EAAMT,OAAOP,QACzCA,MAAOA,IAET,4BAAQJ,QApCI,WArBSV,EAAiBA,EAAe+B,QAAO,SAAA3B,GAAI,OAAKA,EAAKH,UAuB9EY,EAAYb,KAkCR,iBCnEYgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2fddd1ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\ninterface TodoItem {\n  isDone: boolean;\n  description: string;\n}\n\n// Making TodoItem a global var instead of a block scope let means it will\n// persist beyond one React render cycle.\nvar globalTodoList: TodoItem[] = [\n  { isDone: false, description: \"first\" },\n  { isDone: true, description: \"second\" }\n];\n\nconst addToTodoList = (value: string) => {\n  globalTodoList = globalTodoList.concat([\n    { isDone: false, description: value || \"another\" }\n  ]);\n};\n\nconst clearDoneItems = () => globalTodoList = globalTodoList.filter(item => !item.isDone);\n\nfunction TodoListItem({ item }: { item: TodoItem }) {\n  const [checked, setChecked] = React.useState(item.isDone);\n  const toggleDone = () => {\n    item.isDone = !item.isDone;\n    setChecked(item.isDone);\n  };\n\n  return (\n    <div>\n      <input type=\"checkbox\" checked={checked} onClick={toggleDone} />\n      <span>{item.description}</span>\n    </div>\n  );\n}\n\nfunction App() {\n  const [todoList, setTodoList] = React.useState<TodoItem[]>(globalTodoList);\n  const [value, setValue] = React.useState(\"\");\n\n  const clearDone = () => {\n    clearDoneItems();\n    setTodoList(globalTodoList);\n  };\n\n  const addItem = () => {\n    addToTodoList(value);\n    setValue(\"\");\n\n    setTodoList(globalTodoList);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        {todoList.map(item => (\n          <TodoListItem item={item} key={item.description + Math.random()} />\n        ))}\n        <button onClick={addItem}>Add item</button>\n        <input\n          type=\"text\"\n          onChange={event => setValue(event.target.value)}\n          value={value}\n        />\n        <button onClick={clearDone}>Clear done</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}